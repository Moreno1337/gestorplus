@inject IDialogService DialogService
<style>

    /* cor do texto digitado no mudtext */
    .mud-input > input.mud-input-root {
        color: #fff !important;
    }
    /* cor do label do mudtext */
    .mud-input-control > .mud-input-control-input-container > .mud-input-label-inputcontrol {
        color: #fff !important;
    }

    .mud-dialog .mud-dialog-title {
        padding: 0px;
    }

    .mud-input > input.mud-input-root.mud-input-root-filled, div.mud-input-slot.mud-input-root.mud-input-root-filled {
        background-color: #063862;
    }

    .paper-style {
        background-color: #011E36;
        border-radius: 10px;
        padding: 10px;
        margin-bottom:0px !important;
    }

    .mud-dialog-width-sm {
        max-width: 1200px !important;
    }

</style>

<MudGrid Class="paper-style">
    <MudItem xs="10"></MudItem>
    <MudItem xs="2">
        <MudButton Color="Color.Error" OnClick="BtnFechar" Variant="Variant.Filled">
            X
        </MudButton>
    </MudItem>
    <MudItem Class="d-flex justify-center align-center" Style="max-width: 100%; width: 100%;" xs="12">
        <MudText Style="font-weight: 700; text-transform: uppercase; text-align: center; color:#fff;"> Histórico de Transações</MudText>
    </MudItem>
    <MudGrid Style="padding: 5%;">
        <MudItem xs="6" Class="d-flex justify-center">
            <MudTextField Immediate="true"
                          @bind-Value="nomeEncoded" Variant="Variant.Filled" ReadOnly
                           T="string" Label="Nome Fantasia / Pessoa" Style="max-width: 100%; width: 100%;" />
         </MudItem>
         <MudItem xs="6" Class="d-flex justify-center">
             <MudTextField Immediate="true"
                          @bind-Value="identificacaoEncoded" Variant="Variant.Filled" ReadOnly
                           T="string" Label="CNPJ / CPF" Style="max-width: 100%; width: 100%;" />
         </MudItem>
        <MudItem xs="3">
            <MudTextField OnKeyUp="BtnPesquisar" Immediate="true" @bind-Value="TipoTransacaoFiltro" Variant="Variant.Text" T="string" Label="Tipo Transação" />
        </MudItem>
        <MudItem xs="3">
            <MudTextField OnKeyUp="BtnPesquisar" Immediate="true" @bind-Value="NomeFiltro" Variant="Variant.Text" T="string" Label="Nome Responsável" />
        </MudItem>
        <MudItem xs="3">
            <MudTextField OnKeyUp="BtnPesquisar" Immediate="true" @bind-Value="ValorFiltro" Variant="Variant.Text" T="decimal" Label="Valor da Transação" />
        </MudItem>
        <MudItem xs="3">
            <MudTextField OnKeyUp="BtnPesquisar" Immediate="true" @bind-Value="DataTransacaoFiltro" Variant="Variant.Text" T="DateTime" Label="Data da Transição" />
        </MudItem>
        <MudItem xs="12">
            <MudTable Items="listTransacoes" FixedHeader="true" FixedFooter="true" Height="500px" Hover="true" Breakpoint="Breakpoint.None">
                <ToolBarContent>
                    <MudText Style="font-weight: 700;">@listTransacoes.Count() Transações Encontrados</MudText>
                </ToolBarContent>
                <ColGroup>
                    <col style="width: 100px;" />
                    <col style="width: 100px;" />
                    <col style="width: 100px;" />
                    <col style="width: 100px;" />
                    <col style="width: 100px;" />
                </ColGroup>
                <HeaderContent>
                    <MudTh>Tipo Transação</MudTh>
                    <MudTh>Nome Pagante / Usuário</MudTh>
                    <MudTh>Valor</MudTh>
                    <MudTh>Data Transação</MudTh>
                    <MudTh>Motivo Retirada</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd DataLabel="Tipo Transação"></MudTd>
                    <MudTd DataLabel="Nome Pagante / Usuário"></MudTd>
                    <MudTd DataLabel="Valor"></MudTd>
                    <MudTd DataLabel="Data Transação"></MudTd>
                    @if (!string.IsNullOrEmpty(context.MotivoRetirada))
                    {
                        <MudTd>
                            <MudIconButton Size="@Size.Medium" Icon="@Icons.Material.Filled.MarkUnreadChatAlt" OnClick="@(() => BtnMotivoRetirada(context))" />
                        </MudTd>
                    }
                </RowTemplate>
                <PagerContent>
                    <MudTablePager style="overflow-y: scroll;" InfoFormat="@itensInfoFormat" RowsPerPageString="Itens por pág." />
                </PagerContent>
                <NoRecordsContent>
                    <MudText Color="Color.Error">Não foi encontrada nenhuma Transação :\</MudText>
                </NoRecordsContent>
                <LoadingContent>
                    <MudText>Carregando...</MudText>
                </LoadingContent>
            </MudTable>
        </MudItem>
     </MudGrid>
     <MudItem Class="d-flex justify-start align-center mb-5" xs="6">
         <MudButton OnClick="BtnFechar" Variant="Variant.Filled" Color="Color.Error">
             Fechar
         </MudButton>
     </MudItem>
     <MudItem Class="d-flex justify-end align-center mb-5" xs="6">
         <MudButton OnClick="BtnExportar" Variant="Variant.Filled" Color="Color.Info">
             Confirmar
         </MudButton>
     </MudItem>
 </MudGrid>

@code {
    [CascadingParameter]
    MudDialogInstance MudDialog { get; set; }

    [Parameter] public string nomeEncoded { get; set; }
    [Parameter] public string identificacaoEncoded { get; set; }
    [Parameter] public int CodEmpresa { get; set; }
    private string itensInfoFormat = "{first_item}-{last_item} de {all_items}";
    private List<ProdutosModel> listTransacoes = new List<ProdutosModel>();
    public string TipoTransacaoFiltro = string.Empty;
    public string NomeFiltro = string.Empty;
    public decimal ValorFiltro = 0m;
    public DateTime DataTransacaoFiltro;


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        try
        {
            if (firstRender)
            {
                listTransacoes = CarregaTabelaTransacoes(0,"", "", 0,null);
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
        }
    }

    private async Task BtnPesquisar()
    {
        //listTransacoes = CarregaTabelaTransacoes(CodEmpresa, TipoTransacaoFiltro, NomeFiltro, ValorFiltro, DataTransacaoFiltro);
    }

    private List<ProdutosModel> CarregaTabelaTransacoes(int CodEmpres, string TipoTransacaoFiltro, string NomeFiltro, decimal ValorFiltro, DateTime? DataTransacaoFiltro)
    {
        var resp = _Produtos.CarregaTransacoesEmpresa(CodEmpresa, TipoTransacaoFiltro, NomeFiltro, ValorFiltro, DataTransacaoFiltro);
        return resp;
    }
    
    private async void BtnMotivoRetirada(ProdutosModel context)
    {
        var parameters = new DialogParameters()
        {
            ["MotivoRetirada"] = context.MotivoRetirada,
            ["NomeResponsavel"] = context.NomeResponsavel,
            ["nomeEncoded"] = nomeEncoded,
            ["identificacaoEncoded"] = identificacaoEncoded,
        };
        DialogOptions Options = new DialogOptions();
        Options.DisableBackdropClick = true;
        var result = await DialogService.Show<ModalMotivoRetirada>("", parameters, Options).Result;

        if (!result.Cancelled)
        {
            string resp = result.Data.ToString()!;
            Snackbar.Add(resp, Severity.Success);
            listTransacoes = CarregaTabelaTransacoes(0, "", "", 0, null);
        }

        StateHasChanged();
    }

    private async void BtnExportar()
    {
        if (listTransacoes.Count() > 0)
        {
            List<string> colunas = new()
            {
                "Tipo Transação",
                "Nome Responsavel",
                "Valor",
                "Data Transação",
                "Motivo Retirada"
            };

            List<List<string>> linhas = new();

            foreach (var linha in listTransacoes)
            {
                linhas.Add(new()
                {
                    linha.TipoTransacao.ToString()!,
                    linha.NomeResponsavel.ToString()!,
                    linha.ValorTransacao.ToString()!,
                    linha.DataTransacao.ToString()!,
                    linha.MotivoRetirada.ToString()!,
                });
            }

            await _Excel.ExportarTabelaXlsx($"Historico de Transações{nomeEncoded} {identificacaoEncoded}", colunas, linhas);
        }
        else
        {
            Snackbar.Add("ERRO! Não existem dados para exportar", Severity.Error);
        }
    }

    private void BtnFechar()
    {
        MudDialog!.Close(DialogResult.Cancel());
    }

    
}
