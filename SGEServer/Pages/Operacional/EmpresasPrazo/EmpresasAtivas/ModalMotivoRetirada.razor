@inject ISnackbar Snackbar

<style>
    /* cor do texto digitado no mudtext */
    .mud-input > input.mud-input-root {
        color: #fff !important;
    }
    /* cor do label do mudtext */
    .mud-input-control > .mud-input-control-input-container > .mud-input-label-inputcontrol {
        color: #fff !important;
    }
    /* estiliza a cor do label do textfield antes de ser clicado */
    .mud-input-label {
        color: #ACACAB !important;
    }
    /* cor do houver do textfield  */
    .mud-input.mud-input-underline:after {
        border-bottom: 2px solid #04D282;
    }
    /* cor do required caracteres */
    .ms-auto {
        color: #ACACAB;
    }
    /* cor do required text */
    .me-auto {
        color: #ACACAB;
    }
    /* cor do textfieldarea apos digitar */
    .mud-input > textarea.mud-input-root {
        color: #fff !important;
    }
    /* cor do textfield depois de digitado */
    .mud-input > input.mud-input-root, div.mud-input-slot.mud-input-root {
        color: #fff;
    }
    .mud-dialog .mud-dialog-title {
        padding: 0px;
    }

    .mud-input > input.mud-input-root.mud-input-root-filled, div.mud-input-slot.mud-input-root.mud-input-root-filled {
        background-color: #063862;
    }

    .paper-style {
        background-color: #011E36;
        border-radius: 10px;
        padding: 10px;
        margin-bottom:0px !important;
    }

</style>

<MudGrid Style="max-width: 600px;" Class="paper-style">
    <MudItem xs="10"></MudItem>
    <MudItem xs="2">
        <MudButton Color="Color.Error" OnClick="BtnFechar" Variant="Variant.Filled">
            X
        </MudButton>
    </MudItem>
    <MudItem Class="d-flex justify-center align-center" Style="max-width: 100%; width: 100%;" xs="12">
        <MudText Style="font-weight: 700; text-transform: uppercase; text-align: center; color:#fff;"> Retirar Valor da empresa  </MudText>
    </MudItem>
    <MudGrid Style="padding: 5%;">
        <MudItem xs="4" Class="d-flex justify-center">
            <MudTextField Immediate="true"
                          @bind-Value="nomeEncoded" Variant="Variant.Filled" ReadOnly
                           T="string" Label="Nome Fantasia / Pessoa" Style="max-width: 100%; width: 100%;" />
         </MudItem>
         <MudItem xs="4" Class="d-flex justify-center">
             <MudTextField Immediate="true"
                          @bind-Value="identificacaoEncoded" Variant="Variant.Filled" ReadOnly
                           T="string" Label="CNPJ / CPF" Style="max-width: 100%; width: 100%;" />
         </MudItem>
        <MudItem xs="4" Class="d-flex justify-center">
            <MudTextField Immediate="true"
                          Variant="Variant.Filled"
                          @bind-Value="NomeUsuario"
                          Label="Usuário"
                          Style="max-width: 100%; width: 100%;" />
        </MudItem>
        <MudItem xs="10">
            <MudTextField @bind-Value="MotivoRetirada" 
                          Immediate="true" 
                          Variant="@VariantEditar" 
                          T="string" 
                          Label="Motivo da Retirada" 
                          Lines="5" 
                          Counter="500" 
                          MaxLength="500" />
        </MudItem>
        <MudItem xs="2">
            <MudFab Color="Color.Info" OnClick="BtnEditarMotivo" StartIcon="@Icons.Material.Filled.Edit" />
        </MudItem>
     </MudGrid>

     <MudItem Class="d-flex justify-center align-center mb-5" xs="6">
         <MudButton OnClick="BtnCancelar" Variant="Variant.Filled" Color="Color.Error">
             Cancelar
         </MudButton>
     </MudItem>
     <MudItem Class="d-flex justify-center align-center mb-5" xs="6">
         <MudButton OnClick="BtnConfirmar" Variant="Variant.Filled" Color="Color.Success">
             Confirmar
         </MudButton>
     </MudItem>

 </MudGrid>

@code {
    [CascadingParameter]
    MudDialogInstance MudDialog { get; set; }

    [Parameter] public string? nomeEncoded { get; set; }
    [Parameter] public string? identificacaoEncoded { get; set; }
    [Parameter] public string? NomeUsuario { get; set; }

    public decimal ValorRetirar = 0m;
    public string? MotivoRetirada = string.Empty;
    public MudBlazor.Variant VariantEditar = MudBlazor.Variant.Filled;
    private void BtnCancelar()
    {
        MudDialog!.Close(DialogResult.Cancel());
    }

    private void BtnEditarMotivo()
    {
        VariantEditar = MudBlazor.Variant.Text;
    }

    private void BtnConfirmar()
    {
        // Verifica se o valor é numericamente válido e maior que zero.
        if (!string.IsNullOrWhiteSpace(_valorRetirarString) && _valorRetirarString != "-" && ValorRetirar > 0)
        {
            var resultData = new ModalResultData
                {
                    Success = true,
                    ValorRetirar = ValorRetirar,
                    MotivoRetirada = MotivoRetirada
                };

            MudDialog.Close(DialogResult.Ok(resultData));
        }
        else
        {
            Snackbar.Add("Não é possível confirmar devido a um valor inválido ou negativo.", Severity.Error);
        }
    }



    private void BtnFechar()
    {
        MudDialog!.Close(DialogResult.Cancel());
    }

    private string _valorRetirarString = "0";

    public string ValorRetirarString
    {
        get => _valorRetirarString;
        set
        {
            // Verifica se o valor contém apenas números, vírgulas ou pontos.
            if (value.All(c => char.IsDigit(c) || c == ',' || c == '.'))
            {
                if (decimal.TryParse(value.Replace(",", "."), NumberStyles.Any, CultureInfo.InvariantCulture, out var result))
                {
                    ValorRetirar = result;
                    _valorRetirarString = value;
                }
                else
                {
                    Snackbar.Add("Erro! Formatação do valor errada.", Severity.Error);
                }
            }
            else
            {
                Snackbar.Add("Erro! A entrada deve conter apenas números, vírgula ou ponto.", Severity.Error);
            }
        }
    }





}
