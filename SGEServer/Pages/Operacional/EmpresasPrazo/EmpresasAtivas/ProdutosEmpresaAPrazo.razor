@page "/produtosempresaaprazo/{CodCliente:int}/{nomeEncoded}/{identificacaoEncoded}/{CodEmpresa:int}"

@inject IDialogService DialogService
@inject NavigationManager Navigation
@inject AuthenticationLogin authStateProvider
@inject ClientesController _Clientes
@inject ProdutosController _Produtos
@inject ISnackbar Snackbar
@layout MainLayout

<style>
    .mud-input > input.mud-input-root.mud-input-root-filled, div.mud-input-slot.mud-input-root.mud-input-root-filled {
        background-color: #063862;
    }
    /* estiliza a cor do label do textfield antes de ser clicado */
    .mud-input-label {
        color: #ACACAB !important;
    }
    /* cor do houver do textfield  */
    .mud-input.mud-input-underline:after {
        border-bottom: 2px solid #04D282;
    }
    /* muda cor do label depois de algo ser digitado */
    .mud-shrink ~ label.mud-input-label.mud-input-label-inputcontrol, .mud-input:focus-within ~ label.mud-input-label.mud-input-label-inputcontrol {
        color: #fff !important;
    }
    /* cor do textfield depois de digitado */
    .mud-input > input.mud-input-root, div.mud-input-slot.mud-input-root {
        color: #fff;
    }

    .paper-style {
        background-color: #011E36;
        border-radius: 10px;
        padding: 10px;
    }

    .sub-text {
        color: #fff;
        font-size: 20px;
        font-weight: 900;
    }
    h2 {
        text-align: center;
        font-size: @Variaveis.FontPadrao;
        font-weight: 700;
        margin: 20px 0;
        text-transform: uppercase;
        color:#fff;
    }

    .margin-padrao {
        margin: 0 10%;
    }

    .no-wrap {
        white-space:nowrap;
    }
    
    .produto-entregue {
        background-color: #9dd8b1;
    }

    .produto-pendente {
        background-color: #d8b99d;
    }

    .produto-cancelado {
        background-color: #d89d9d;
    }
    .verde {
        color:green;
        font-weight:bold;
    }
    .laranja {
        color: darkorange;
        font-weight: bold;
    }
</style>

@if (isAuthenticated)
{
    <div class="margin-padrao">
        <h2>Produtos a prazo</h2>
        <MudGrid Class="paper-style">
            <MudItem xs="12" Class="d-flex justify-space-between">
                <MudItem>
                    <MudText Class="sub-text">Filtros</MudText>
                </MudItem>
                <MudItem>
                    <MudButton Size="Size.Large"
                               OnClick="BtnHistoricoTransacoes"
                               Variant="Variant.Filled"
                               Color="Color.Info">
                        Historico de Transações
                    </MudButton>
                </MudItem>
                
            </MudItem>
            
            <MudItem xs="6">
                <MudTextField Variant="Variant.Text" T="string" Label="Nome" />
            </MudItem>
            <MudItem xs="6"></MudItem>
            <MudItem xs="3">
                <MudTextField @bind-Value="nomeEncoded"
                              ReadOnly
                              Variant="Variant.Filled"
                              T="string"
                              Label="Nome do Cliente" />
            </MudItem>
            <MudItem xs="3">
                <MudTextField @bind-Value="identificacaoEncoded"
                              ReadOnly
                              Variant="Variant.Filled"
                              T="string"
                              Label="CNPJ/CPF" />
            </MudItem>
            <MudItem xs="6" Class="d-flex flex-column justify-center align-end">
                    <MudButton Style="height:40px; width:170px;margin-bottom:20px;" 
                               OnClick="BtnRetirarValor" 
                               Variant="Variant.Filled" 
                               Color="Color.Warning" 
                               Class="no-wrap">
                               - Retirar Valor
                    </MudButton>
                    <MudButton Style="height:40px; width:170px;" 
                               OnClick="BtnAbaterValor" 
                               Variant="Variant.Filled" 
                               Color="Color.Primary" 
                               Class="no-wrap">
                               + Depositar Valor
                    </MudButton>
            </MudItem>
            
            <MudItem xs="12">
                <MudTable Items="listProdutos" FixedHeader="true" FixedFooter="true" Height="500px" Hover="true" Breakpoint="Breakpoint.None">
                    <ToolBarContent>
                        <MudText Style="font-weight: 700;">@listProdutos.Count() Produtos Encontrados</MudText>
                    </ToolBarContent>
                    <ColGroup>
                        <col style="width: 120px" />
                        <col />
                        <col />
                        <col />
                        <col />
                        <col />
                        <col />
                        <col />
                    </ColGroup>
                    <HeaderContent>
                        <MudTh>CodProduto</MudTh>
                        <MudTh>Item</MudTh>
                        <MudTh>Quantidade</MudTh>
                        <MudTh>Valor Uni.</MudTh>
                        <MudTh>Valor Total</MudTh>
                        <MudTh>Data Venda</MudTh>
                        <MudTh>Data Vencimento</MudTh>
                        <MudTh>Status Pagamento</MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd Class="@GetRowClass(context.StatusPagamento)" DataLabel="CodProduto">@context.CodProduto</MudTd>
                        <MudTd Class="@GetRowClass(context.StatusPagamento)" DataLabel="Item">@context.Item</MudTd>
                        <MudTd Class="@GetRowClass(context.StatusPagamento)" DataLabel="Quantidade">@context.QtdeItens</MudTd>
                        <MudTd Class="@GetRowClass(context.StatusPagamento)" DataLabel="Valor Uni.">@context.ValorUnitario.ToString("F2")</MudTd>
                        <MudTd Class="@GetRowClass(context.StatusPagamento)" DataLabel="Valor Total">@context.ValorTotal.ToString("F2")</MudTd>
                        <MudTd Class="@GetRowClass(context.StatusPagamento)" DataLabel="Data Venda">@context.DataVenda</MudTd>
                        <MudTd Class="@GetRowClass(context.StatusPagamento)" DataLabel="Data Vencimento">@context.DataVencimento</MudTd>
                        <MudTd Class="@GetRowClass(context.StatusPagamento)" DataLabel="Status Pagamento">@context.StatusPagamento</MudTd>
                        <MudTd>
                                <MudTooltip Color="Color.Info" Arrow="true">
                                <ChildContent>
                                    <MudIconButton Size="@Size.Medium" Icon="@Icons.Material.Outlined.DeleteForever" OnClick="@(() => BtnRemover(context))" />
                                </ChildContent>
                                <TooltipContent>
                                <MudText Typo="Typo.body2">Se o status do produto estiver em <span class="laranja">Pendente:</span> o produto será</MudText>
                                    <MudText Typo="Typo.body2">removido e somado ao estoque</MudText>
                                    <MudText Typo="Typo.body2">Se o status do produto estiver em <span class="verde">Pago:</span> o produto será</MudText>
                                    <MudText Typo="Typo.body2">removido, somado ao estoque e o valor irá se converter em créditos</MudText>
                                </TooltipContent>
                                </MudTooltip>
                        </MudTd>
                    </RowTemplate>
                       
                    <FooterContent>
                        <MudTh Style="font-weight: 700; text-align: end; font-size: 20px;" Class="mud-table-cell-custom-group mud-table-cell-custom-group-footer" colspan="9">VALOR TOTAL: R$ @ValorTotalSaida.ToString("F2")</MudTh>
                    </FooterContent>
                    <PagerContent>
                        <MudTablePager style="overflow-y: scroll;" InfoFormat="@itensInfoFormat" RowsPerPageString="Itens por pág." />
                    </PagerContent>
                    <NoRecordsContent>
                        <MudText Color="Color.Error">Não foi encontrado nenhum Cliente com Produtos a prazo :\</MudText>
                    </NoRecordsContent>
                    <LoadingContent>
                        <MudText>Carregando...</MudText>
                    </LoadingContent>
                </MudTable>
            </MudItem>

            <MudItem Class="d-flex justify-start" xs="6">
                <MudButton OnClick="BtnVoltar" Variant="Variant.Filled" Color="Color.Error">Voltar</MudButton>
            </MudItem>
            <MudItem Class="d-flex justify-end" xs="6">
                <MudButton OnClick="BtnExportar" Variant="Variant.Filled" Color="Color.Info">Exportar</MudButton>
            </MudItem>

            </MudGrid>

        </div>
}

@code {
    private bool isAuthenticated = false;

    private string itensInfoFormat = "{first_item}-{last_item} de {all_items}";
    private List<ProdutosModel> listProdutos = new List<ProdutosModel>();
    private List<ProdutosModel> DadosProduto = new List<ProdutosModel>();
    private LoginModel Usr = new();

    [Parameter] public int CodCliente { get; set; }
    [Parameter] public string? nomeEncoded { get; set; }
    [Parameter] public string? identificacaoEncoded { get; set; }
    [Parameter] public int CodEmpresa { get; set; }
    public decimal ValorAbater = 0m;
    public string? NomeResponsavel = string.Empty;
    public decimal ValorRetirar = 0m;
    public string? MotivoRetirada = string.Empty;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            isAuthenticated = await AuthenticationLogin.AuthenticateUser(authStateProvider, Usr, Navigation);

            listProdutos = CarregaTabelaProdutosAPrazo();

            StateHasChanged();
        }
    }

    private List<ProdutosModel> CarregaTabelaProdutosAPrazo()
    {
        try
        {

            var resp = _Produtos.CarregarProdutosAPrazoPorEmpresa(Usr.CodEmpresa, CodCliente);


            return resp;
        }
        catch (Exception ex)
        {

            Console.WriteLine("Erro ao carregar produtos a prazo: " + ex.Message);
            return new List<ProdutosModel>();
        }
    }

    private async void BtnExportar()
    {
        if (listProdutos.Count() > 0)
        {
            var cliente = listProdutos.FirstOrDefault();
            var clienteInfo = string.IsNullOrEmpty(cliente.NomeFantasia) ? cliente.NomePessoa : cliente.NomeFantasia;
            var identificacao = string.IsNullOrEmpty(cliente.Cnpj) ? cliente.Cpf : cliente.Cnpj;

            string nomeArquivo = $"Produtos a Prazo - {clienteInfo} - {identificacao}";

            List<string> colunas = new List<string>
        {
            "CodProduto",
            "Item",
            "Quantidade",
            "Valor Uni.",
            "Valor Total",
            "Data Venda",
            "Data Vencimento",
            "Status"
        };

            List<List<string>> linhas = new List<List<string>>();

            foreach (var linha in listProdutos)
            {
                linhas.Add(new List<string>
            {
                linha.CodProduto.ToString(),
                linha.Item,
                linha.QtdeItens.ToString(),
                linha.ValorUnitario.ToString("F2"),
                linha.ValorTotal.ToString("F2"),
                linha.DataVenda.ToShortDateString(),
                linha.DataVencimento.ToShortDateString(),
                linha.StatusPagamento,
            });
            }

            await _Excel.ExportarTabelaXlsx(nomeArquivo, colunas, linhas);
        }
        else
        {
            Snackbar.Add("ERRO! Não existem dados para exportar", Severity.Error);
        }
    }



    private string GetRowClass(string statusPagamento)
    {
        switch (statusPagamento)
        {
            case "PAGO":
                return "produto-entregue";
            case "PENDENTE":
                return "produto-pendente";
            default:
                return "produto-cancelado"; 
        }
    }

    private async void BtnRemover(ProdutosModel context)
    {
        var parameters = new DialogParameters();

        DialogOptions Options = new DialogOptions();
        Options.DisableBackdropClick = true;
        var result = await DialogService.Show<ModalConfirmarCancelar>("Deseja realmente excluir o produto?", parameters, Options).Result;

        if (!result.Cancelled)
        {
            var resp = _Produtos.RemoverProdutoPrazo(context.CodProdutoAPrazo, Usr.CodEmpresa);
            string mensagem = resp.Split("|")[0];
            Snackbar.Add(mensagem, Severity.Success);
            listProdutos = CarregaTabelaProdutosAPrazo();
        }

        StateHasChanged();
    }


    private async void BtnAbaterValor()
    {

        var parameters = new DialogParameters();
        parameters.Add("nomeEncoded", nomeEncoded!);
        parameters.Add("identificacaoEncoded", identificacaoEncoded!);
        DialogOptions Options = new DialogOptions();
        Options.DisableBackdropClick = true;
        var result = await DialogService.Show<ModalDepositarValor>("", parameters, Options).Result;

        if (!result.Cancelled && result.Data is ModalResultData resultData)
        {

            ValorAbater = resultData.ValorAbater;
            NomeResponsavel = resultData.NomeResponsavel;
            ConfirmarDepositarValor();
            listProdutos = CarregaTabelaProdutosAPrazo();

            StateHasChanged();
        }
    }
    private void ConfirmarDepositarValor()
    {
        try
        {
            string resp = _Produtos.InserirValorAbater(ValorAbater, CodCliente, Usr.CodEmpresa, NomeResponsavel);

            Snackbar.Add("SUCESSO! " + resp.Split("|")[0], Severity.Success);
        }
        catch (Exception ex)
        {
            Snackbar.Add("ERRO! Ocorreu um problema ao abater o valor: " + ex.Message, Severity.Error);
        }

    }

    private async void BtnRetirarValor()
    {

        var parameters = new DialogParameters();
        parameters.Add("nomeEncoded", nomeEncoded!);
        parameters.Add("identificacaoEncoded", identificacaoEncoded!);
        parameters.Add("NomeResponsavel", Usr.Nome!);
        DialogOptions Options = new DialogOptions();
        Options.DisableBackdropClick = true;
        var result = await DialogService.Show<ModalRetirarValor>("", parameters, Options).Result;

        if (!result.Cancelled && result.Data is ModalResultData resultData)
        {
            ValorRetirar = resultData.ValorRetirar;
            MotivoRetirada = resultData.MotivoRetirada;
            ConfirmarRetirarValor();
            listProdutos = CarregaTabelaProdutosAPrazo();

            StateHasChanged();

        }
    }
    private void ConfirmarRetirarValor()
    {
        try
        {
            string resp = _Produtos.InserirValorRetirar(ValorRetirar,MotivoRetirada, CodCliente, Usr.CodEmpresa, Usr.Nome);

            Snackbar.Add("SUCESSO! " + resp.Split("|")[0], Severity.Success);
        }
        catch (Exception ex)
        {
            Snackbar.Add("ERRO! Ocorreu um problema ao retirar o valor: " + ex.Message, Severity.Error);
        }
    }

    private async void BtnHistoricoTransacoes()
    {
        var parameters = new DialogParameters();
        DialogOptions Options = new DialogOptions();
        Options.DisableBackdropClick = true;
        var result = await DialogService.Show<ModalHistoricoTransacoes>("", parameters, Options).Result;

        if (!result.Cancelled)
        {
            listProdutos = CarregaTabelaProdutosAPrazo();
            StateHasChanged();
        }
    }
    
    private decimal ValorTotalSaida
    {
        get
        {
            return listProdutos
                .Where(item => item.StatusPagamento == "PENDENTE")
                .Sum(item => item.ValorTotal);
        }
    }




    // -------- BTN VOLTAR ----------

    private void BtnVoltar()
    {
        Navigation.NavigateTo("/empresasprazo");
    }

    
}
