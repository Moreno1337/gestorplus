@page "/editarcotacao"

@inject NavigationManager Navigation
@inject AuthenticationLogin authStateProvider
@inject ProdutosController _Produtos
@inject CotacaoController _Cotacao
@layout MainLayout

<style>
    /* estiliza a cor do label do textfield antes de ser clicado */
    .mud-input-label {
        color: #ACACAB !important;
    }
    /* cor do houver do textfield  */
    .mud-input.mud-input-underline:after {
        border-bottom: 2px solid #04D282;
    }
    /* muda cor do label depois de algo ser digitado */
    .mud-shrink ~ label.mud-input-label.mud-input-label-inputcontrol, .mud-input:focus-within ~ label.mud-input-label.mud-input-label-inputcontrol {
        color: #fff !important;
    }
    /* cor do textfield depois de digitado */
    .mud-input > input.mud-input-root, div.mud-input-slot.mud-input-root {
        color: #fff;
    }
    h2 {
        text-align: center;
        font-size: @Variaveis.FontPadrao;
        font-weight: 700;
        margin: 20px 0px;
        text-transform: uppercase;
        color:#fff;
    }

    .margin-padrao {
        margin: 0 10%;
    }

    .paper-style {
        background-color: #011E36;
        border-radius: 10px;
        padding: 12px;
    }

    .sub-text {
        color: #fff;
        font-size: 20px;
        font-weight: 900;
    }

    
</style>

@if (isAuthenticated)
{
    <div class="margin-padrao">
    
    <h2>Editar Cotação</h2>
    <MudGrid Class="paper-style">
        <MudGrid Class="pl-6 pr-6">
            <MudItem xs="12">
                <MudText Class="sub-text">Filtros</MudText>
            </MudItem>
            <MudGrid Class="mb-5">
                <MudItem xs="3">
                        <MudTextField OnKeyUp="BtnPesquisar" Immediate="true" @bind-Value="NumCotacaoFiltro" Variant="Variant.Text" T="string" Label="N. Cotação" />
                </MudItem>
                <MudItem xs="3">
                        <MudTextField OnKeyUp="BtnPesquisar" Immediate="true" @bind-Value="NomeEncode" Variant="Variant.Text" T="string" Label="Nome Fantasia / Pessoa" />
                </MudItem>
                <MudItem xs="3">
                        <MudTextField OnKeyUp="BtnPesquisar" Immediate="true" @bind-Value="IdentificacaoEncode" Variant="Variant.Text" T="string" Label="CNPJ / CPF" />
                </MudItem>
            </MudGrid>
        </MudGrid>
        <MudGrid Class=" d-flex flex-column">
            <MudItem xs="12">
                    <MudTable Items="listCotacao" Striped="true" Bordered="true" FixedHeader="true" FixedFooter="true" Height="500px" Hover="true" Class="mb-5" Breakpoint="Breakpoint.None">
                    <ToolBarContent>
                        <MudText Style="font-weight: 700;">@listCotacao.Count() Cotações Encontradas</MudText>
                    </ToolBarContent>
                    <ColGroup>
                        <col style="width: 180px;" />
                        <col style="width: 180px;" />
                        <col style="width: 180px;" />
                        <col style="width: 180px;" />
                        <col style="width: 180px;" />
                        <col style="width: 40px;" />
                    </ColGroup>
                    <HeaderContent>
                        <MudTh>N. Cotação</MudTh>
                        <MudTh>CNPJ/CPF</MudTh>
                        <MudTh>Nome Fantasia/Pessoa</MudTh>
                        <MudTh>Data Criação</MudTh>
                        <MudTh>Valor Total</MudTh>
                        <MudTh></MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd DataLabel="N. Cotação">@context.NumCotacao</MudTd>
                        <MudTd DataLabel="CNPJ/CPF">
                            @if (!string.IsNullOrWhiteSpace(context.Cnpj))
                            {
                                @context.Cnpj
                            }
                            else
                            {
                                @context.Cpf
                            }
                        </MudTd>
                        <MudTd DataLabel="Nome">
                            @if (!string.IsNullOrWhiteSpace(context.NomeFantasia))
                            {
                                @context.NomeFantasia
                            }
                            else
                            {
                                @context.NomePessoa
                            }
                        </MudTd>
                        <MudTd DataLabel="Data Criação">@context.DataCriacao</MudTd>
                        <MudTd DataLabel="Valor Total">@context.ValorTotal.ToString("F2")</MudTd>
                        <MudTd>
                            <MudIconButton Size="@Size.Medium" Icon="@Icons.Material.Outlined.Edit" OnClick="@(() => BtnEditar(context))" />
                        </MudTd>
                    </RowTemplate>
                    <PagerContent>
                        <MudTablePager style="overflow-y: scroll;" InfoFormat="@itensInfoFormat" RowsPerPageString="Itens por pág." />
                    </PagerContent>
                    <NoRecordsContent>
                        <MudText Color="Color.Error">Não foi encontrado nenhuma movimentação :\</MudText>
                    </NoRecordsContent>
                    <LoadingContent>
                        <MudText>Carregando...</MudText>
                    </LoadingContent>
                </MudTable>
                    <MudItem xs="10"></MudItem>
                    <MudItem xs="2">
                        <MudButton OnClick="BtnVoltar" Variant="Variant.Filled" Color="Color.Error">
                            Voltar
                        </MudButton>
                    </MudItem>
            </MudItem>
            
            

        </MudGrid>
    </MudGrid>

</div>
}

@code {
    private bool isAuthenticated = false;
    private List<CotacaoModel> listCotacao = new List<CotacaoModel>();
    private string itensInfoFormat = "{first_item}-{last_item} de {all_items}";
    private decimal valorTotal = 0;
    private string NumCotacaoFiltro = string.Empty;
    private string NomeEncode = string.Empty;
    private string IdentificacaoEncode = string.Empty;

    private LoginModel Usr = new();



    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            isAuthenticated = await AuthenticationLogin.AuthenticateUser(authStateProvider, Usr, Navigation);

            listCotacao = CarregaTabelaCotacao("", "", "");

            StateHasChanged();
        }
    }

    private async Task BtnPesquisar()
    {
        listCotacao = _Cotacao.CarregarCotacoes(Usr.CodEmpresa, NumCotacaoFiltro, NomeEncode, IdentificacaoEncode);
    }

    private List<CotacaoModel> CarregaTabelaCotacao(string NumCotacaoFiltro, string NomeEncode, string IdentificacaoEncode)
    {
        try
        {
            var resp = _Cotacao.CarregarCotacoes(Usr.CodEmpresa, NumCotacaoFiltro, NomeEncode, IdentificacaoEncode);

            return resp;
        }
        catch (Exception ex)
        {
            Console.WriteLine("Erro ao carregar cotações salvas: " + ex.Message);
            return new List<CotacaoModel>();
        }
    }

    private void BtnEditar(CotacaoModel cotacao)
    {
        // Ajustando os valores para evitar espaços desnecessários
        string nomeFantasia = cotacao.NomeFantasia?.Trim() ?? string.Empty;
        string nomePessoa = cotacao.NomePessoa?.Trim() ?? string.Empty;
        string cnpj = cotacao.Cnpj?.Trim();
        string cpf = cotacao.Cpf?.Trim();

        string url;
        if (!string.IsNullOrWhiteSpace(cnpj))
        {
            // Construção de URL para pessoa jurídica
            url = $"/editarcotacaobtneditar/{cotacao.CodCotacao}/{Uri.EscapeDataString(nomeFantasia)}/{Uri.EscapeDataString(cnpj)}/{cotacao.PrazoEntregaRetornado}/{cotacao.FaturamentoRetornado}/{cotacao.NumCotacao}";
        }
        else
        {
            // Construção de URL para pessoa física
            url = $"/editarcotacaobtneditar/{cotacao.CodCotacao}/{Uri.EscapeDataString(nomePessoa)}/{Uri.EscapeDataString(cpf)}/{cotacao.PrazoEntregaRetornado}/{cotacao.FaturamentoRetornado}/{cotacao.NumCotacao}";
        }

        // Limpeza final na URL para evitar problemas de formatação
        url = Uri.EscapeUriString(url).Replace("//", "/").TrimEnd('/');
        Navigation.NavigateTo(url);
    }


   


    private void BtnVoltar()
    {
        Navigation.NavigateTo("/dashboard");
    }
    
}
