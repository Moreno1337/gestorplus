@page "/vizualizaritenscotacaofinalizada/{NumCotacao}/{CodCotacao:int}"

@inject NavigationManager Navigation
@inject AuthenticationLogin authStateProvider
@inject CotacaoController _Cotacao
@inject IDialogService DialogService
@layout MainLayout
@inject ExcelHelper _Excel

<style>
    /* estiliza a cor do label do textfield antes de ser clicado */
    .mud-input-label {
        color: #ACACAB !important;
    }
    /* cor do houver do textfield  */
    .mud-input.mud-input-underline:after {
        border-bottom: 2px solid #04D282;
    }
    /* muda cor do label depois de algo ser digitado */
    .mud-shrink ~ label.mud-input-label.mud-input-label-inputcontrol, .mud-input:focus-within ~ label.mud-input-label.mud-input-label-inputcontrol {
        color: #fff !important;
    }
    /* cor do textfield depois de digitado */
    .mud-input > input.mud-input-root, div.mud-input-slot.mud-input-root {
        color: #fff;
    }

    .mud-input > input.mud-input-root.mud-input-root-filled, div.mud-input-slot.mud-input-root.mud-input-root-filled {
        background-color: #063862;
    }

    .paper-style {
        background-color: #011E36;
        border-radius: 10px;
        padding: 10px;
    }

    h2 {
        text-align: center;
        font-size: @Variaveis.FontPadrao;
        font-weight: 700;
        margin: 20px 0;
        text-transform: uppercase;
        color:#fff;
    }

    .margin-padrao {
        margin: 0 10%;
    }

    .produto-entregue {
        background-color: #9dd8b1;
    }

    .produto-pendente {
        background-color: #d8b99d;
    }

    .produto-cancelado {
        background-color: #d89d9d;
    }

</style>

@if (isAuthenticated)
{
    <div class="margin-padrao">
        <h2>Informações da Ordem de Compra</h2>
        <MudGrid Class="paper-style">
            <MudItem xs="12" sm="4">
                <MudTextField Value="@NumCotacao" ReadOnly Variant="Variant.Filled" T="string" Label="N.º Cotação" />
             </MudItem>
             <MudItem xs="12" sm="4">
                <MudTextField Value="@(DadosEmpresa.NomeFantasia != null && !string.IsNullOrWhiteSpace(DadosEmpresa.NomeFantasia) ? DadosEmpresa.NomeFantasia : DadosEmpresa.NomePessoa)" ReadOnly Variant="Variant.Filled" T="string" Label="Nome Da Empresa" />

             </MudItem>
             <MudItem xs="12" sm="4">
                <MudTextField Value="@(string.IsNullOrWhiteSpace(DadosEmpresa.Cnpj) ? DadosEmpresa.Cpf : DadosEmpresa.Cnpj)" ReadOnly Variant="Variant.Filled" T="string" Label="CNPJ/CPF" />
             </MudItem>

             <MudItem xs="12">
                 <MudTable MultiSelection="false" Items="listProdutos" Hover="true" Breakpoint="Breakpoint.None">
                     <ColGroup>
                         <col style="width: 80px;" />
                         <col style="width: 240px;" />
                         <col />
                         <col />
                         <col />
                         <col style="width: 240px;" />
                         <col style="width: 80px;" />
                         <col style="width: 40px;" />
                     </ColGroup>
                     <HeaderContent>
                         <MudTh>Quantidade</MudTh>
                         <MudTh>Item</MudTh>
                         <MudTh>NCM</MudTh>
                         <MudTh>CA</MudTh>
                         <MudTh>Un.Medida</MudTh>
                         <MudTh>Valor Uni.</MudTh>
                         <MudTh>Valor Total</MudTh>
                         <MudTh>Status</MudTh>
                     </HeaderContent>
                     <RowTemplate Context="produto">
                         <MudTd Class="@GetRowClass(produto.CodStatus)" DataLabel="Quantidade">@produto.QtdeItens</MudTd>
                            <MudTd Class="@GetRowClass(produto.CodStatus)" DataLabel="Item">@produto.Item</MudTd>
                            <MudTd Class="@GetRowClass(produto.CodStatus)" DataLabel="Ncm">@produto.Ncm</MudTd>
                            <MudTd Class="@GetRowClass(produto.CodStatus)" DataLabel="CA">@produto.CaEpi</MudTd>
                            <MudTd Class="@GetRowClass(produto.CodStatus)" DataLabel="Uni.Medida">@produto.UnidadeMedida</MudTd>
                            <MudTd Class="@GetRowClass(produto.CodStatus)" DataLabel="Valor Uni.">R$ @produto.ValorUnitario.ToString("F2")</MudTd>
                            <MudTd Class="@GetRowClass(produto.CodStatus)" DataLabel="Valor Total">R$ @produto.ValorTotal.ToString("F2")</MudTd>
                            <MudTd Class="@GetRowClass(produto.CodStatus)" DataLabel="Status">@produto.StatusPagamento</MudTd>
                        </RowTemplate>
                        <FooterContent>
                            <MudTh Style="font-weight: 700; text-align: end; font-size: 20px;" Class="mud-table-cell-custom-group mud-table-cell-custom-group-footer" colspan="5">VALOR TOTAL: R$ @valorTotal.ToString("F2")</MudTh>
                        </FooterContent>
                        <NoRecordsContent>
                            <MudText Color="Color.Error">Nenhum item nessa cotação :\</MudText>
                        </NoRecordsContent>
                        <LoadingContent>
                            <MudText>Carregando...</MudText>
                        </LoadingContent>
                    </MudTable>
                </MudItem>

                <MudItem Class="d-flex justify-start" xs="6">
                    <MudButton OnClick="BtnVoltar" Variant="Variant.Filled" Color="Color.Error">Voltar</MudButton>
                </MudItem>
                <MudItem Class="d-flex justify-end" xs="6">
                    <MudButton OnClick="BtnExportar" Variant="Variant.Filled" Color="Color.Info">Exportar</MudButton>
                </MudItem>


            </MudGrid>

        </div>
}

@code {
    private bool isAuthenticated = false;

    private ProdutosModel DadosEmpresa = new ProdutosModel();
    private List<ProdutosModel> listProdutos = new List<ProdutosModel>();
    [Parameter] public string? NumCotacao { get; set; }
    [Parameter] public int CodCotacao { get; set; }
    private LoginModel Usr = new();
    private decimal valorTotal = 0;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        try
        {
            if (firstRender)
            {
                isAuthenticated = await AuthenticationLogin.AuthenticateUser(authStateProvider, Usr, Navigation);
                listProdutos = _Cotacao.ListarProdutosCotacao(Usr.CodEmpresa, CodCotacao);
                DadosEmpresa = _Cotacao.RetornarDadosCotacao(Usr.CodEmpresa, CodCotacao, DadosEmpresa);

                foreach (var item in listProdutos)
                {
                    valorTotal += item.ValorTotal;
                }

                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
        }
    }

    // -------- BTN VOLTAR ----------

    private void BtnVoltar()
    {
        Navigation.NavigateTo("/ordenscomprafinalizadas");
    }

    private async void BtnExportar()
    {
        if (listProdutos.Count() > 0)
        {
            List<string> colunas = new()
        {
            "Quantidade",
            "Item",
            "Ncm",
            "Ca",
            "Un.Medida",
            "Valor Unitario",
            "Valor Total",
            "Status"
        };

            List<List<string>> linhas = new();

            foreach (var linha in listProdutos)
            {
                linhas.Add(new()
                {
                    linha.QtdeItens.ToString()!,
                    linha.Item.ToString()!,
                    linha.Ncm!,
                    linha.CaEpi.ToString()!,
                    linha.UnidadeMedida,
                    linha.ValorUnitario.ToString()!,
                    linha.ValorTotal.ToString()!,
                    linha.StatusPagamento.ToString()!
                });
            }

            await _Excel.ExportarTabelaXlsx("Itens Ordem Compra Finalizada", colunas, linhas);
        }
        else
        {
            Snackbar.Add("ERRO! Não existem dados para exportar", Severity.Error);
        }
    }

    private string GetRowClass(int codStatus)
    {
        if (codStatus == 4)
        {
            return "produto-entregue";
        }
        else if (codStatus == 5)
        {
            return "produto-pendente";
        }
        else if (codStatus == 6)
        {
            return "produto-cancelado";
        }
        else
        {
            return string.Empty;
        }
    }


    
}
