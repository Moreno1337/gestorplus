@page "/pessoajuridicacadastrada"

@inject NavigationManager Navigation
@inject AuthenticationLogin authStateProvider
@inject ClientesController _Clientes
@inject IDialogService DialogService
@layout MainLayout
@inject ISnackbar Snackbar

<style>
    /* estiliza a cor do label do textfield antes de ser clicado */
    .mud-input-label {
        color: #ACACAB !important;
    }
    /* cor do houver do textfield  */
    .mud-input.mud-input-underline:after {
        border-bottom: 2px solid #04D282;
    }
    /* muda cor do label depois de algo ser digitado */
    .mud-shrink ~ label.mud-input-label.mud-input-label-inputcontrol, .mud-input:focus-within ~ label.mud-input-label.mud-input-label-inputcontrol {
        color: #fff !important;
    }
    /* cor do textfield depois de digitado */
    .mud-input > input.mud-input-root, div.mud-input-slot.mud-input-root {
        color: #fff;
    }
    .ms-auto {
        color: #ACACAB;
    }
    /* cor do required text */
    .me-auto {
        color: #ACACAB;
    }
    .paper-style {
        background-color: #011E36;
        border-radius: 10px;
        padding: 10px;
    }

    .sub-text {
        color: #fff;
        font-size: 20px;
        font-weight: 900;
    }
    h2 {
        text-align: center;
        font-size: @Variaveis.FontPadrao;
        font-weight: 700;
        margin: 20px 0;
        text-transform: uppercase;
        color:#fff;
    }

    .margin-padrao {
        margin: 0 10%;
    }

    
</style>

@if (isAuthenticated)
{
    <div class="margin-padrao">
    <h2>Clientes Juridicos Cadastrados</h2>
        <MudGrid Class="paper-style">
            <MudItem xs="12">
                <MudText Class="sub-text">Filtros</MudText>
            </MudItem>
            <MudItem xs="4">
                <MudTextField OnKeyUp="BtnPesquisar" Immediate="true" @bind-Value="NomeFantasia" Variant="Variant.Text" T="string" Label="Nome Fantasia" />
            </MudItem>
            <MudItem xs="4">
                <MudTextField OnKeyUp="BtnPesquisar" Immediate="true" @bind-Value="RazaoSocial" Variant="Variant.Text" T="string" Label="Razão Social" />
            </MudItem>
            <MudItem xs="4">
                <MudTextField Counter="18" 
                              OnKeyUp="BtnPesquisar"
                              @bind-Value="Cnpj"
                              Immediate="true"
                              Variant="Variant.Text" T="string" Label="Cnpj" />
            </MudItem>

        <MudItem xs="12">
            <MudTable Items="listClientes" FixedHeader="true" FixedFooter="true" Height="500px" Hover="true" Breakpoint="Breakpoint.None">
                <ToolBarContent>
                    <MudText Style="font-weight: 700;">@listClientes.Count() Clientes juridicos Encontrados</MudText>
                </ToolBarContent>
                <ColGroup>
                    <col />
                    <col />
                    <col style="width: 240px;" />
                    <col style="width: 60px;" />
                    <col style="width: 60px;" />
                </ColGroup>
                <HeaderContent>
                    <MudTh>Nome Fantasia</MudTh>
                    <MudTh>Razao Social</MudTh>
                    <MudTh>CNPJ</MudTh>
                    <MudTh></MudTh>
                    <MudTh></MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd DataLabel="Nome Fantasia">@context.NomeFantasia</MudTd>
                    <MudTd DataLabel="Razao Social">@context.RazaoSocial</MudTd>
                    <MudTd DataLabel="CNPJ">@context.Cnpj</MudTd>
                    <MudTd>
                                <MudIconButton Size="@Size.Medium" Icon="@Icons.Material.Outlined.Edit" OnClick="@(() => BtnEditar(context))" />
                    </MudTd>
                    <MudTd>
                                <MudIconButton Size="@Size.Medium" Icon="@Icons.Material.Outlined.DeleteForever" OnClick="@(() => BtnRemover(context))" />
                    </MudTd>
                </RowTemplate>
                <PagerContent>
                    <MudTablePager style="overflow-y: scroll;" InfoFormat="@itensInfoFormat" RowsPerPageString="Itens por pág." />
                </PagerContent>
                <NoRecordsContent>
                    <MudText Color="Color.Error">Não foi encontrado nenhum cliente :\</MudText>
                </NoRecordsContent>
                <LoadingContent>
                    <MudText>Carregando...</MudText>
                </LoadingContent>
            </MudTable>
        </MudItem>

            <MudItem Class="d-flex justify-start" xs="6">
                <MudButton OnClick="BtnVoltar" Variant="Variant.Filled" Color="Color.Error">Voltar</MudButton>
            </MudItem>
            <MudItem Class="d-flex justify-end" xs="6">
                <MudButton OnClick="BtnExportar" Variant="Variant.Filled" Color="Color.Info">Exportar</MudButton>
            </MudItem>


        </MudGrid>

    </div>
}

@code {
    private bool isAuthenticated = false;

    private string itensInfoFormat = "{first_item}-{last_item} de {all_items}";
    private List<ClientesModel> listClientes = new List<ClientesModel>();
    private string NomeFantasia = string.Empty;
    private string RazaoSocial = string.Empty;
    private string Cnpj = string.Empty;

    private LoginModel Usr = new();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        try
        {
            if (firstRender)
            {
                isAuthenticated = await AuthenticationLogin.AuthenticateUser(authStateProvider, Usr, Navigation);

                listClientes = CarregaTabelaClientes( "","","");

                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
        }
    }

    private void BtnVoltar()
    {
        Navigation.NavigateTo("/dashboard");
    }

    private void BtnEditar(ClientesModel clientes)
    {
        Navigation.NavigateTo($"/editarpessoajuridica/{clientes.CodCliente}");
    }

    private async void BtnRemover(ClientesModel cliente)
    {
        var parameters = new DialogParameters()
            {
                ["CodCliente"] = cliente.CodCliente,
                ["Cliente"] = cliente.NomeFantasia,
            };

        DialogOptions Options = new DialogOptions();
        Options.DisableBackdropClick = true;
        var result = await DialogService.Show<RemoverClienteJuridico>("", parameters, Options).Result;

        if (!result.Cancelled)
        {
            string resp = result.Data.ToString()!;
            Snackbar.Add(resp, Severity.Success);
            listClientes = CarregaTabelaClientes( "","","");
        }

        StateHasChanged();
    }

    private async void BtnExportar()
    {
        if (listClientes.Count() > 0)
        {
            List<string> colunas = new()
        {
            "Nome Fantasia",
            "Razão Social",
            "Cnpj",
        };

            List<List<string>> linhas = new();

            foreach (var linha in listClientes)
            {
                linhas.Add(new()
                {
                    linha.NomeFantasia.ToString()!,
                    linha.RazaoSocial.ToString()!,
                    linha.Cnpj.ToString()!,
                });
            }

            await _Excel.ExportarTabelaXlsx("Clientes Juridicos Cadastrados", colunas, linhas);
        }
        else
        {
            Snackbar.Add("ERRO! Não existem dados para exportar", Severity.Error);
        }
    }


    private async Task BtnPesquisar()
    {
        listClientes = CarregaTabelaClientes(NomeFantasia, RazaoSocial, Cnpj);
    }


    private List<ClientesModel> CarregaTabelaClientes(string NomeFantasia, string RazaoSocial, string Cnpj)
    {
        var resp = _Clientes.CarregaClientesJuridicosCadastrados(Usr.CodEmpresa, NomeFantasia, RazaoSocial, Cnpj);

        return resp;
    }


}

   
